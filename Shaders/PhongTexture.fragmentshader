#version 330

// Interpolated values from the vertex shaders
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Output data
out vec4 color;

uniform vec4 modelColor;
uniform float shininess; 

void main() {
    // Use the  prefixed variables here
    vec3 n = normalize(Normal_cameraspace);
    vec3 l = normalize(LightDirection_cameraspace);
    float cosTheta = clamp(dot(n, l), 0, 1);

    vec3 e = normalize(EyeDirection_cameraspace);
    vec3 r = reflect(-l, n);
    float cosAlpha = clamp(dot(e, r), 0, 1);

    vec4 ambient = vec4(0.2, 0.2, 0.2, 1.0) * modelColor;
    vec4 diffuse = cosTheta * modelColor;
    vec4 specular = vec4(0.8, 0.8, 0.8, 1.0) * pow(cosAlpha, shininess);

    color = ambient + diffuse + specular;
}


